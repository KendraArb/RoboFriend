{"version":3,"sources":["constants.js","reducers.js","reportWebVitals.js","serviceWorkerRegistration.js","actions.js","api/api.js","components/Header.js","components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialState","search","searchField","robots","isPending","error","reducers","searchRobots","state","action","type","payload","requestRobots","rootReducers","combineReducers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","dispatch","link","fetch","response","json","data","Header","nextProps","nextState","className","Component","Scroll","props","style","overflowY","height","children","Card","name","email","id","src","alt","width","CardList","map","robot","SearchBox","htmlFor","placeholder","onChange","ErrorBoundary","hasError","info","this","setState","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","event","text","target","value","logger","createLogger","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yPAAaA,EAAsB,sBACtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCA/BC,EAAe,CACpBC,OAAQ,CAAEC,YAAa,IACvBC,OAAQ,CAAEA,OAAQ,GAAIC,WAAW,EAAMC,MAAO,KAGzCC,EAAW,CAChBC,aAAc,WAA+C,IAA9CC,EAA6C,uDAArCR,EAAaC,OAAQQ,EAAgB,uDAAP,GACpD,OAAQA,EAAOC,MACd,KAAKd,EACJ,OAAO,2BAAKY,GAAZ,IAAmBN,YAAaO,EAAOE,UACxC,QACC,OAAOH,IAGVI,cAAe,WAA+C,IAA9CJ,EAA6C,uDAArCR,EAAaG,OAAQM,EAAgB,uDAAP,GACrD,OAAQA,EAAOC,MACd,KAAKb,EACJ,OAAO,2BAAKW,GAAZ,IAAmBJ,WAAW,IAC/B,KAAKN,EACJ,OAAO,2BAAKU,GAAZ,IAAmBL,OAAQM,EAAOE,QAASP,WAAW,IACvD,KAAKL,EACJ,OAAO,2BAAKS,GAAZ,IAAmBH,MAAOI,EAAOE,QAASP,WAAW,IACtD,QACC,OAAOI,KAKEK,EAAeC,YAAgBR,G,QCnB7BS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKRQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAACkB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfyB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAACzC,GACNqC,QAAQrC,MAAM,4CAA6CA,M,4CCvFpDO,EAAgB,kBAAM,SAAAmC,GCPZ,IAAAC,EDQtBD,EAAS,CAAErC,KAAMb,KCRKmD,EDSd,6CCTsBC,MAAMD,GAAM9B,MAAK,SAAAgC,GAAQ,OAAIA,EAASC,WDUlEjC,MAAK,SAAAkC,GAAI,OAAIL,EAAS,CAAErC,KAAMZ,EAAwBa,QAASyC,OAC/DN,OAAM,SAAAzC,GAAK,OAAI0C,EAAS,CAAErC,KAAMX,EAAuBY,QAASN,SECpDgD,E,oLATQC,EAAWC,GAChC,OAAO,I,+BAIP,OAAO,oBAAIC,UAAU,KAAd,6B,GANYC,aCSNC,G,MARA,SAAAC,GACd,OACC,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAAUN,UAAU,SAA/D,SACEG,EAAMI,aCQKC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,sBAAKX,UAAU,sDAAf,UACC,qBAAKY,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,SAASC,MAAM,MAAMR,OAAO,QAChF,gCACC,6BAAKG,IACL,4BAAIC,WCKOK,EAVE,SAAC,GAAgB,IAAdpE,EAAa,EAAbA,OACnB,OACC,8BACEA,EAAOqE,KAAI,SAAAC,GACX,OAAO,cAAC,EAAD,CAAqBN,GAAIM,EAAMN,GAAIF,KAAMQ,EAAMR,KAAMC,MAAOO,EAAMP,OAAvDO,EAAMN,UCMbO,EAXG,SAAC,GAAgB,IAAdzE,EAAa,EAAbA,OACpB,OACC,sBAAKuD,UAAU,MAAf,UACC,uBAAOmB,QAAQ,YAAYnB,UAAU,iDAArC,2BAGA,uBAAOW,GAAG,YAAYX,UAAU,mCAAmC9C,KAAK,SAASkE,YAAY,gBAAgBC,SAAU5E,QCS3G6E,E,kDAdd,WAAYnB,GAAQ,IAAD,8BAClB,cAAMA,IACDnD,MAAQ,CAAEuE,UAAU,GAFP,E,8DAKD1E,EAAO2E,GACxBC,KAAKC,SAAS,CAAEH,UAAU,M,+BAI1B,OAAOE,KAAKzE,MAAMuE,SAAW,yDAAmCE,KAAKtB,MAAMI,a,GAXjDN,aCyBtB0B,G,wLAEJF,KAAKtB,MAAMyB,oB,+BAEF,IAAD,EACmDH,KAAKtB,MAAxDxD,EADA,EACAA,OAAQD,EADR,EACQA,YAAamF,EADrB,EACqBA,eAAgBjF,EADrC,EACqCA,UACvCkF,EAAiBnF,EAAOoF,QAAO,SAAAd,GACpC,OAAOA,EAAMR,KAAKuB,cAAcC,SAASvF,EAAYsF,kBAEtD,OACC,sBAAKhC,UAAU,KAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAWvD,OAAQoF,IACnB,cAAC,EAAD,UACEjF,EACA,yCAEA,eAAC,EAAD,WACC,cAAC,EAAD,CAAUD,OAAQmF,IADnB,gB,GAjBY7B,cA2BHiC,eA1CS,SAAAlF,GACvB,MAAO,CACNN,YAAaM,EAAMD,aAAaL,YAChCC,OAAQK,EAAMI,cAAcT,OAC5BC,UAAWI,EAAMI,cAAcR,cAIN,SAAA2C,GAC1B,MAAO,CACNsC,eAAgB,SAAAM,GAAK,OAAI5C,GRnBG6C,EQmBqBD,EAAME,OAAOC,MRlBxD,CAAEpF,KAAMd,EAAqBe,QAASiF,KADhB,IAAAA,GQoB5BR,gBAAiB,kBAAMrC,EAASnC,SA+BnB8E,CAA6CP,GCvCtDY,EAASC,yBACTC,EAAQC,YAAYrF,EAAcsF,YAAgBC,IAAOL,IAE/DM,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACC,cAAC,EAAD,QAGFO,SAASC,eAAe,SAMzB1F,IVVO,SAAkBiB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyE,IAAIC,eAAwBjF,OAAOC,SAASiF,MACpDC,SAAWnF,OAAOC,SAASkF,OAIvC,OAGFnF,OAAOoF,iBAAiB,QAAQ,WAC9B,IAAM/E,EAAK,UAAM4E,eAAN,sBAEPnF,IAgEV,SAAiCO,EAAOC,GAEtCiB,MAAMlB,EAAO,CACXgF,QAAS,CAAE,iBAAkB,YAE5B7F,MAAK,SAACgC,GAEL,IAAM8D,EAAc9D,EAAS6D,QAAQE,IAAI,gBAEnB,MAApB/D,EAASgE,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClF,UAAUC,cAAckF,MAAMlG,MAAK,SAACkB,GAClCA,EAAaiF,aAAanG,MAAK,WAC7BQ,OAAOC,SAAS2F,eAKpBxF,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IAAI,oEAtFV4E,CAAwBxF,EAAOC,GAI/BC,UAAUC,cAAckF,MAAMlG,MAAK,WACjCwB,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OUb/BwF,K","file":"static/js/main.bf2422f0.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { combineReducers } from 'redux';\r\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialState = {\r\n\tsearch: { searchField: '' },\r\n\trobots: { robots: [], isPending: true, error: '' },\r\n};\r\n\r\nconst reducers = {\r\n\tsearchRobots: (state = initialState.search, action = {}) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t\treturn { ...state, searchField: action.payload };\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t},\r\n\trequestRobots: (state = initialState.robots, action = {}) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\t\treturn { ...state, isPending: true };\r\n\t\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\t\treturn { ...state, robots: action.payload, isPending: false };\r\n\t\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\t\treturn { ...state, error: action.payload, isPending: false };\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t},\r\n};\r\n\r\nexport const rootReducers = combineReducers(reducers);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { apiCall } from './api/api';\r\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchfield = text => {\r\n\treturn { type: CHANGE_SEARCH_FIELD, payload: text };\r\n};\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tapiCall('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const apiCall = link => fetch(link).then(response => response.json());\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <h1 className=\"f1\">RoboFriends</h1>;\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../assets/css/Scroll.css';\r\n\r\nconst Scroll = props => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', height: '80vh' }} className=\"scroll\">\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"avatar\" width=\"200\" height=\"200\" />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map(robot => {\r\n\t\t\t\treturn <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ search }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<label htmlFor=\"searchbox\" className=\"tracked-mega db mb2 f6 light-green georgia ttu\">\r\n\t\t\t\tSearch Robots\r\n\t\t\t</label>\r\n\t\t\t<input id=\"searchbox\" className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={search} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { hasError: false };\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.state.hasError ? <h1>Oops. That is not good.</h1> : this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { setSearchfield, requestRobots } from '../actions';\n\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport '../assets/css/App.css';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchChange: event => dispatch(setSearchfield(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()),\n\t};\n};\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\trender() {\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox search={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t{isPending ? (\n\t\t\t\t\t\t<h1>Loading</h1>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />;\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t)}\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport thunk from 'redux-thunk';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { rootReducers } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from 'redux';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport 'tachyons';\nimport './assets/css/index.css';\n\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst store = createStore(rootReducers, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}